function [] = meanvel(windowSec, varargin)

%MEANVEL    Calculate, plot and save the mean velc of a population and perform ttest on beginning vs end.
%   FORMAT: meanvel(timeWindow, folder1, folder2, ...)
%       where 
%       - timeWindow is the number of seconds of centroid velocity data 
%         from the beginning and end to be compared via a t-test.
%       - folderN is a population folder containing folders called worm*
%         that, in turn, contain files metrics.mat and data.mat as
%         generated by wormproc and metrics
%   Function assumes that the Nth velc value from each member of a given
%   population was represents movement at essentially the same time.  That
%   is, each member of the population should have the same data grab rate
%   and fpt (frames-per-timeblock) value.  
%
%   The centroid velocity data for each worm is plotted for reference, and
%   the results of a two-sample t-test are presented in the command window.
%   Finally the mean centroid velocity vector for the population is plotted 
%   versus a mean time vector and both are saved as a Matlab .mat file
%   called 'meanCentroidVelocity.mat' in the population folder. 
%
%   example:
%       meanvel(60, ...
%           'G:\Data\Chris\2008_11_07\N2',...
%           'G:\Data\Chris\2008_11_07\mutant1',...
%           'G:\Data\Chris\2008_11_07\mutant2');
%       which would create centroid velocity plots for each worm plus a
%       summary plot for each of the three populations.
%
% - Christopher J. Cronin  (cjc@caltech.edu)
%   California Institute of Technology
%   Sternberg Lab
%   Pasadena, CA  USA
%   November 7, 2008


% meanvel(60, 'Z:\Data\Chris\Meenakshi_test\103108');
% meanvel(60, 'Y:\Meenakshi\Newmetrics\YT1724HRNIC');

% tic

% Error Checking:
if ~isnumeric(windowSec)
    error('ERROR: Must specify size of time window before folder names.  See ''help meanvel'' for details');
end

% Establish variables
% windowSec = 30;     % [seconds] Window size
alphaValue = 0.05;        % Alpha = 5% (for ttest2)

% User explanation:
fprintf(1, '\nPerforming a t-test of the null hypothesis that the centroid \n');
fprintf(1, 'velocity values from the first and last %d seconds of each \n', windowSec);
fprintf(1, 'worms'' recordings are independent random samples from normal \n');
fprintf(1, 'distributions with equal means, but unequal (and unknown) \n');
fprintf(1, 'variances, against the alterntive that the means are not equal.\n');
fprintf(1, 'Using alpha = %g\n\n', alphaValue);

for i=1:nargin-1    % go thru each population folder

    fprintf('- - - - - - - - - - \n');
    
    % get contents of each directory
    pd = varargin{i};
    % pd = 'Z:\Data\Chris\Meenakshi_test\103108';

    % Find all worm* items (folders) inside parent folder
    d = dir([pd filesep 'worm*']);
    nd = numel(d);

    velcmat = [];
    timeVmat = [];
    velclength = [];

    % now loop over each worm* folder
    for j=1:nd       % worm directories

        % get name of directory
        name = d(j).name;

        % Only process items that are DIRECTORIES:
        if d(j).isdir

            % print out message to stdout
            fprintf(1, 'Processing %s\n', [pd filesep name]);

            % clear variables
            clear velc fpt timeV
            clear velcFirst velcLast

            % load in just velc
            load([pd filesep name filesep 'metrics.mat'], 'velc', 'fpt');
            load([pd filesep name filesep 'data.mat'], 'timeV');

            % Condition data
            velc = abs(velc);
            timeV = timeV(1:fpt:end);
            timeV = timeV(2:end);   % for comparison to delta position
            timeV = timeV(1:numel(velc));
            
            % -----------------------------------------------------------
            % Grab first and last windows of velc for ttest2
            velcFirst   = velc(timeV <= windowSec);
            velcLast    = velc(timeV >= (timeV(end)-windowSec) );
            
            % Diagnostics:
            % Plot
            figure; plot(timeV(1:numel(velc)), velc); grid on; 
            % titles
            xlabel('Time  [sec]');                          %, 'FontWeight', 'bold');
            ylabel('Mean Centroid Velocity  [mm/sec]');     %, 'FontWeight', 'bold');
            title(['Single worm: ' pd filesep name], 'Interpreter', 'none');
            % Prepare plot for printing
            set(gcf, 'PaperOrientation', 'Landscape');
            set(gcf, 'PaperPosition', [0.25  0.25  10.5  8.0]);
            % set(gca, 'FontWeight', 'bold');
            % Set axes to use 0,0 as origin and set max time to max time
            axislims = axis(gca);
            axislims(1) = 0;
            axislims(2) = round(timeV(end));
            axislims(3) = 0;
%             axislims(4) = 0.25;
            axis(gca,axislims);
            set(gca, 'XTick', [0:60:axislims(2)]);

            fprintf(1,'Mean of first %d seconds = %f mm/sec  (based on %d samples)\n', windowSec, nanmean(velcFirst), sum(~isnan(velcFirst)));
            fprintf(1,'Mean of last  %d seconds = %f mm/sec  (based on %d samples)\n', windowSec, nanmean(velcLast), sum(~isnan(velcLast)));
            
            % Compare first and last windows
            [h,p,ci,stats] = ttest2(velcFirst, velcLast, alphaValue, 'both', 'unequal');
            if h==1
                fprintf(1, 'Means different?  YES   ');
            elseif h==0
            	fprintf(1, 'Means different?  No    ');
            else
                error('ERROR: h (from ttest2 calculation) should be 0 or 1.  Try increasing the time window size.  See ''help meanvel'' for proper syntax.')
            end
            fprintf(1, '(h = %d) (p = %f)\n', h, p);
            fprintf(1, 'Confidence interval (ci) = %f, %f\n\n', ci);
            % -----------------------------------------------------------
            
            % Allocate matrices based on size of first
            if j==1
                velcmat = NaN*zeros(nd,numel(velc));
                timeVmat = NaN*zeros(nd,numel(timeV));
                velclength = numel(velc);
            end
            
            % Expand matrix if necessary (even at beginning)
            if numel(velc) > velclength
                % make temporary copies
                tempvelcmat = velcmat;
                temptimeVmat = timeVmat;
                
                % new length value
                velclength = numel(velc);
                
                % Re-initialize expanded matrices
                velcmat = NaN*zeros(nd, velclength);
                timeVmat = NaN*zeros(nd, velclength);
                
                % Refill matrices
                velcmat([1:size(tempvelcmat,1)], [1:size(tempvelcmat,2)]) = ...
                    tempvelcmat;
                timeVmat([1:size(temptimeVmat,1)], [1:size(temptimeVmat,2)]) = ...
                    temptimeVmat;
            end
           
            % Load matrices
            velcmat(j,1:numel(velc))    = abs(velc);
            timeVmat(j,1:numel(velc))  = timeV(1:numel(velc));

        end     % if d(j)

    end     % for j=1:nd

    % Find mean of velocity for each time block (and mean time for
    % plotting)
    meanvelc = nanmean(velcmat);
    %     meanvelc = mean(newvelc);
    meantimeV = nanmean(timeVmat);
    
    % Plot
    figure;
    plot(meantimeV, meanvelc);
    grid on
    
    % Set axes to use 0,0 as origin and set max time to max time
    axislims = axis(gca);
    axislims(1) = 0;
    axislims(2) = round(meantimeV(end));
    axislims(3) = 0;
    axislims(4) = 0.25;
    axis(gca,axislims);
    set(gca, 'XTick', [0:60:axislims(2)]);
    
    % titles
    xlabel('Time  [sec]', 'FontWeight', 'bold');
    ylabel('Mean Centroid Velocity  [mm/sec]', 'FontWeight', 'bold');
    title(pd, 'Interpreter', 'none', 'FontWeight', 'bold');
    
    % Prepare plot for printing
    set(gcf, 'PaperOrientation', 'Landscape');
    set(gcf, 'PaperPosition', [0.25  0.25  10.5  8.0]);
    set(gca, 'FontWeight', 'bold');

    % Save vectors
    save([pd filesep 'meanCentroidVelocity.mat'], ...
        'meanvelc', 'meantimeV');

end     % for i=1:nargin

fprintf('- - - - - - - - - - \n');
% toc

    
    